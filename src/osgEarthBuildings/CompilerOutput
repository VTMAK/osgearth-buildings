/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H
#define OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H

#include "Common"
#include "CompilerSettings"
#include "FilterUsage"

#include <osg/Geode>
#include <osg/Matrix>
#include <osg/TextureBuffer>
#include <osgEarth/Containers>
#include <osgEarth/Progress>
#include <osgEarthFeatures/Session>
#include <osgEarthFeatures/FeatureIndex>
#include <osgEarthSymbology/ModelResource>
#include <osgEarthSymbology/ResourceCache>

namespace osg
{
   class MatrixTransform;
}

namespace osgEarth { namespace Buildings 
{
    using namespace osgEarth::Features;
    using namespace osgEarth::Symbology;

    struct TextureCache : public osg::Referenced
    {
        Threading::Mutex _mutex;

        osg::Texture* get(SkinResource* skin, const osgDB::Options* readOptions) {
            _mutex.lock();
            osg::ref_ptr<osg::Texture>& t = _cache[skin->imageURI()->full()];
            if (!t.valid()) {
                t = skin->createTexture(readOptions);
            }
            _mutex.unlock();
            return t.get();
        }

        osg::Texture* getOrInsert(osg::Texture* tex)
        {
            osg::Texture* result = tex;

            if (tex && 
                tex->getNumImages() > 0 &&                      
                tex->getImage(0) &&
                !tex->getImage(0)->getFileName().empty() &&     // has a valid filename
                dynamic_cast<osg::TextureBuffer*>(tex) == 0L)   // isn't an instance data texture
            {
                _mutex.lock();
                osg::ref_ptr<osg::Texture>& t = _cache[tex->getImage(0)->getFileName()];
                if (!t.valid())
                    t = tex;
                _mutex.unlock();
                result = t.get();
            }

            return result;
        }

        // todo: consider changing this to an observer_ptr -gw
        std::map<std::string, osg::ref_ptr<osg::Texture> > _cache;
    };

    /**
     * Object passed to the building compiler that collects all the
     * OSG output generated by the compilation process.
     */
    class OSGEARTHBUILDINGS_EXPORT CompilerOutput
    {
    public:
        CompilerOutput();

        /** Name of this compiler output */
        void setName(const std::string& name) { _name = name; }

        /** Tile key of data that results in this output */
        void setTileKey(const TileKey& key) { _key = key; }

        void setTextureCache(TextureCache* cache) { _texCache = cache; }

        /** Read output from a cache bin */
        osg::Node* readFromCache(const osgDB::Options* readOptions, ProgressCallback* progress) const;

        /** Write output to a cache bin */
        void writeToCache(osg::Node*, const osgDB::Options*, ProgressCallback*) const;

        /** Build and return a scene graph based on the output in this object. */
        osg::Node* createSceneGraph(Session* session, const CompilerSettings& settings, const osgDB::Options* readOptions, ProgressCallback*) const;

        void setRange(float value) { _range = value; }
        float getRange() const     { return _range; }
        
        /** Delocatization matrix to apply to the entire output. */
        void setLocalToWorld(const osg::Matrix& m);
        const osg::Matrix& getLocalToWorld() const { return _local2world; }
        const osg::Matrix& getWorldToLocal() const { return _world2local; }

        /** Feature index to use (optional) */
        void setIndex(FeatureIndexBuilder* index) { _index = index; }
        FeatureIndexBuilder* getIndex()           { return _index; }

        /** Sets the currently active feature (for indexing purposes). If an index is set,
            calls to addDrawable or addInstance will prompt the indexer to tag the new
            data with this feature. */
        void setCurrentFeature(Feature* f) { _currentFeature = f; }

        /** Run on the result of cretaeSceneGraph or readFromCache to install VPs. */
        void postProcess(osg::Node* node, const CompilerSettings& settings, ProgressCallback* progress) const;

        void setFilterUsage(FilterUsage usage);
    public:
        
        /** Adds a drawable to the output. */
        void addDrawable(osg::Drawable* drawable);

        /** Adds a drawable, categorized under a tag. */
        void addDrawable(osg::Drawable* drawable, const std::string& tag);

        /** Adds an instance of a model resource */
        void addInstance(ModelResource* model, const osg::Matrix& matrix);

        /** The group containing externally referenced models */
        osg::Group* getExternalModelsGroup() const { return _externalModelsGroup.get(); }

        /** Group holding debugging geometry */
        osg::Group* getDebugGroup() const { return _debugGroup.get(); }
        
        /** Returns the StateSet unique to this skin resource (may be empty) - used for caching. */
        osg::StateSet* getSkinStateSet(SkinResource* skin, const osgDB::Options* readOptions);

        osg::Texture* getTexture(SkinResource* skin, const osgDB::Options* readOptions) {
            return _texCache->get(skin, readOptions);
        }

    protected:

        osg::Matrix _local2world, _world2local;

        osg::ref_ptr<osg::Geode> _defaultGeode;
        typedef fast_map<std::string, osg::ref_ptr<osg::Geode> > TaggedGeodes;
        TaggedGeodes _geodes;
        
        typedef std::vector<osg::Matrix> MatrixVector;
        typedef std::map< osg::ref_ptr<ModelResource>, MatrixVector > InstanceMap;
        InstanceMap _instances;
        
        osg::ref_ptr<osg::Group> _externalModelsGroup;

        osg::ref_ptr<osg::Group> _debugGroup;

        // caches catalog resources like skins and instanced models for this output object.
        osg::ref_ptr<ResourceCache> _resourceCache;

        FeatureIndexBuilder* _index;

        Feature* _currentFeature;

        float _range;

        TileKey _key;
        std::string _name;

        Threading::Mutex* _globalMutex;
        
        mutable Threading::Mutex _cacheAccessMutex;

        typedef std::map<std::string, osg::ref_ptr<osg::StateSet> > SkinStateSetCache;
        SkinStateSetCache _skinStateSetCache;

        osg::ref_ptr<TextureCache> _texCache;

        FilterUsage _filterUsage;

        std::string createCacheKey() const;

        void addInstances(osg::MatrixTransform* root, Session* session, const CompilerSettings& settings, const osgDB::Options* readOptions, ProgressCallback*) const;
        void addInstancesNormal(osg::MatrixTransform* root, Session* session, const CompilerSettings& settings, const osgDB::Options* readOptions, ProgressCallback*) const;
        void addInstancesZeroWorkCallbackBased(osg::MatrixTransform* root, Session* session, const CompilerSettings& settings, const osgDB::Options* readOptions, ProgressCallback*) const;
    };
} }

#endif // OSGEARTH_BUILDINGS_COMPILER_OUTPUT_H
